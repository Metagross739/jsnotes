useReducer

useReducer is an advanced, hook to manage state. It is used, when the app size and state managent is large. like if you use two state for doing the work, in your app. 

  const [count, setCount] = useState(0);
  const [step, setStep] = useState(1);
  
  these two states, can be set and mainted its state, with a single useReducer function.
  
  Lets take a look at the syntax, of useReucer.
  
  const [stateVaribale, dispatch] = useReducer(reducer, initialstate);
  
  so just like useState(), useReducer() takes the initial state, that will be set as default state varibale value. We also have a stateVaribale who maitains the updated and default state value. and we also have a dispatch() which responsible to, set the new state of the stateVariable.
  
  But then wahts new? its just like, useState() varibale?.  Well no, look closley, useReucer also accepts a reducer fucntion. You can say, it is solely resposible for, managing the state, more effectively better than useState.
  
  in useState(), we passed updated state value to, setState(cs => cs + 1); and the new state was updated behind the scenes. No code was visible, how the state is updating, nor we could change, how it should be updated. 
  
  Thus useReucer give us this felxibilty, with reducer function() how ? well dispatch() and function reducer() works together for it!
  
  
  function reducer(state, action){}
  
  here the reducer accepts two parameters, state, which is previous state and action as a data, sent by a user. so that state and data, will be computed together and new output will be returned and will be stored in the statevariable provided.
  
  
  //let's get a better look with code.
  
  const {count : 0, step: 1} = initialState;\
  
  function reducer(state, action){
   switch(action.type)
   case: "inc"
   	return {...state, state.count: state.count+1};
   case: "setValue"
   	return {...state, state.step: action.payload}
   default:
   	return initialState;
  }
  
  const [count, dispatch] = useReucer(reducer, initialState);
  
  //the default, value would be an object now.
  
  
  function handleClickEvent(e){
  	dispatch({type: "inc"});
  }
  
  function setInitialValue(e){
  	dispatch({type: "setValue", payload: (e.target.value)})
  }
//lets breakdown the code. 

like written at the very begining, two seprate useState written for step and count, gets minimised and are maintained by single useReducer() with intial value as an object {} which has both the value {count:0, step: 1};

//function reducer

this function accepts two parameter, current state and the action. here action expects an object to be passed. which will have type of data, and payload means the autal data. type in the sense can also or does mean, the name of the data. which is further used while indentifying where the state needs to be updated or not.

it expects the action data in this way {type: "name", payload: "Pushkar"}, and as i said dispatch and reducer function works together. this action oject is passed through, dispatch({type: "name", payload: "Pushkar"}); function.

so when
 handleClickEvent(e) event happens, dispatch({type: "inc"}) is passed to reducere function, passing type or payload, any on among the two or both is a felxible option developer had.
 
  switch(action.type)
   case: "inc"
   	return {...state, state.count: state.count+1};
   	
   	this swtich case checks, if action.type is "inc". then {...spread the current state, update state.count value with state.count+1};
   	
   	so if state was {count: 0} now it would be returned as {count : 1} and this value would be stored in 
   	
   	const [count, dispatch] = useReucer(reducer, initialState);
   	
   	this count variable which now holds an object, so we have to destructure it in the app like this,
   	
   	const {count, step} = count;
   	
   	then go on to use thse values in app like
   	
   	<>
   	<p>{count}</p>
   	<p>{step}</p>
   	</>
   	
  So that's how useReucer operates, it has more major useCases, but this basic if perfect to understand why useReucer.
  
  While using useReducer
  
        case "onNextQue":
        return {
          ...state,
          index: (state.index || 0) + 1,
        
        }
        
        if in dispatch you did not mention payload, reducer may not no wether the index for defined initally and when if it had been, its prevous state might be unknown. hence instead of writing
        
        index: index + 1. this would give us, index not defined error.
        instead do this
        index: (state.index) + 1
       
       
      //we cannot set state on a progress bar.
      <progress max={} value={} />
      its an html element
 
 
 //setInterval
 
 as you should know, that, inside useEffect() if you have used, setInterval, belive me, it would keep on addinng on the previous one, on every re-render, and it would misbhevae, like, you have setInterval of 1 second for 10 secons, it would keep on adding setInterval one upon each other, since all running at the same, time at each-rernedr, the 10 seconds will be completed in 2 secods only. hence you need to clear setInterval on each re-render, so that, everytime interval can run for 10 seconds, here study the code.
 
 setInterval(function(),1000) keeps on running every millisecond, untill you have to clearInterval()
 
 function Timmer({dispatch, secondsRemaning}) {

    useEffect(() => {
       const id = setInterval(function(){
            dispatch({type: "onTick"})
        }, 1000);
        return () => clearInterval(id);
    },[dispatch])

    return (
        <div className='timer'>
            {secondsRemaning}
        </div>
    );
}

 <Routes>
      <Route path="/" element={<App />}>
      <Route element={<PageLayout />}>
        <Route path="/privacy" element={<Privacy />} />
        <Route path="/tos" element={<Tos />} />
      </Route>
 <Routes/>


// Redux


Redux is similar to useReducer, just with normal differences, although Redux in itself is a third party library and and has multiple features and not just state management. 

Just like useReducer, we use dispatch function to provide {type, payload} to reducer function. In redux we provide it to, store. Store has multiple reducer function. The genereal idea is that, each reducer will handle one service like shopping cart in ecommerce projec will have 1 reducer function and userProfile will have another reducer function.


//reduxjs/toolkit

action creators in reducers uing reduxtoolkit accepts only one argument, that's a drawback. Be it is handled using the, prepare object.

//structure goes like this

updateInfo : {

	prepare(name, age){
	
		return {
		
			payload: {
				name,
				age,
			},
		};
	},
	
	
	reducer(state,action){
	
	   state.name = action.payload;
	   state.age = action.payload;
	
	}

}
 
this is how action creator functions are are written if, their are more than 1 argumnets action creator functions need.

//IMP Redux

  const totalCartQuantity = useSelector((state) =>
    state.cart.cart.reduce((sum, item) => sum + item.quantity, 0),
  );
  
  
  the above kind of useSelector computation cannot be done inside the, functional component. it is adivsed by redux team to actually, put these selector computations inside the slice file itself.
  
 //these selector computation functions should start from the letter "get"
 
 like "getTotalQuantity"
 
 //IMP alays remember whenever an, Object of a is handled as a state, rememeber you should first know, how to the structure of the object would look like, becuase some data would come from api, and some you have to contrut yourself.
 
 //function MenuItem({ pizza }) {
  const { id, name, unitPrice, ingredients, soldOut, imageUrl } = pizza;

  const dispatch = useDispatch();
  function AddItem() {
    const newItem = {
      pizzaId: id,
      name,
      quantity: 1,
      unitPrice,
      totalPrice: unitPrice * 1,
    };
    dispatch(addItem(newItem));
  }
  
  //export const getTotalQuantity = (state) =>
  state.cart.cart.reduce((sum, item) => sum + item.quantity, 0);

export const getTotalPrice = (state) =>
  state.cart.cart.reduce((sum, item) => sum + item.totalPrice, 0);
  
  
  but these functions might cause a, performance issue in a largescale application.
  
  //for this theirs a `reselect` library inside the redux library. try to learn it sometimes.
  
  //Study this complex selector function
  
  export const getCurrentQuantityById = (id) => (state) => state.cart.cart.find(item => item.pizzaId === id)?. quantity ?? 0;
  
  //for better undestanding
  
  https://chatgpt.com/c/ea698aba-e433-43d8-bcc5-b48a4bbc3c73
  
  //IMP SHIT TO STUDY
  
  Great question! Let's dive into why updating the `item` object using `const item` actually results in updating the original state in Redux Toolkit.

### **Understanding the Reference:**

When you execute this line:

```javascript
const item = state.cart.find((item) => item.pizzaId === action.payload);
```

- **`state.cart.find(...)`** searches the `cart` array and returns a reference to the object within that array. 
- The key point here is that `item` is not a new independent object; it is a reference to an existing object within the `state.cart` array.

### **Why This Updates the State:**

1. **Reference vs. Copy**:
   - **Reference**: When `const item = ...` assigns the result of `.find()` to `item`, it's pointing to the exact same object that exists within `state.cart`. Itâ€™s not a new object but rather a reference to the object in the `cart` array.
   - **Direct Mutation**: When you modify `item.quantity++`, you are modifying the object that `item` references, which is the object inside `state.cart`. Therefore, the original state is updated because the object in the array is directly modified.

2. **Immer's Role**:
   - **Tracking Mutations**: Redux Toolkit, with Immer, tracks these changes. Even though it appears you are directly mutating the state, Immer intercepts these mutations. It knows that `item` is a part of `state.cart` and marks that part of the state as "dirty" (i.e., changed).
   - **Creating a New Immutable State**: Behind the scenes, Immer will create a new version of the state with the necessary changes, ensuring the state remains immutable.

### **Simplified Example:**

Imagine this simplified scenario:

```javascript
let cart = [{ pizzaId: 1, quantity: 2 }, { pizzaId: 2, quantity: 1 }];
let item = cart.find(item => item.pizzaId === 1);

// At this point, item is a reference to the first object in the cart array:
item.quantity++;

// The cart array now looks like this:
console.log(cart); // [{ pizzaId: 1, quantity: 3 }, { pizzaId: 2, quantity: 1 }]
```

- `item` points to the first object in `cart`. By modifying `item`, youâ€™re actually modifying the object inside `cart`.

### **Key Takeaways:**
- **References in JavaScript**: When you assign an object from an array (or any data structure) to a variable, that variable holds a reference to the original object, not a copy.
- **Redux Toolkit & Immer**: Redux Toolkit uses Immer to handle the immutability of the state, which means you can write mutative-looking code, and Immer will ensure that the state remains immutable.

In conclusion, the state is updated because `item` is not a new object but a reference to the original object in `state.cart`. The changes made to `item` directly affect the original object in the state.


//How refrences and Copy of objects works

Great question! Let's clarify how methods like `find()`, `filter()`, and `map()` work in JavaScript, especially in terms of whether they return a copy or a reference.

### **1. `.find()` Method:**

- **Purpose**: The `.find()` method is used to search an array and return the **first** element that satisfies the provided testing function.
  
- **Return Value**: 
  - **Reference**: If the element is an object, `.find()` returns a reference to that object in the original array.
  - **Not a Copy**: It does not create a new object; instead, it gives you a reference to the existing object. This means that if you modify the object returned by `.find()`, you are modifying the object within the original array.

**Example:**

```javascript
let cart = [{ pizzaId: 1, quantity: 2 }, { pizzaId: 2, quantity: 1 }];
let item = cart.find(item => item.pizzaId === 1);

// item is a reference to the object { pizzaId: 1, quantity: 2 }
item.quantity++;

console.log(cart); // [{ pizzaId: 1, quantity: 3 }, { pizzaId: 2, quantity: 1 }]
```

### **2. `.filter()` Method:**

- **Purpose**: The `.filter()` method creates a new array with all elements that pass the test implemented by the provided function.
  
- **Return Value**:
  - **New Array**: `.filter()` returns a new array containing references to the objects that passed the filter criteria.
  - **References**: The elements in the new array are references to the same objects in the original array. If you modify an object in the filtered array, it also modifies the object in the original array.

**Example:**

```javascript
let cart = [{ pizzaId: 1, quantity: 2 }, { pizzaId: 2, quantity: 1 }];
let filteredCart = cart.filter(item => item.quantity > 1);

// filteredCart is a new array, but it contains references to the original objects
filteredCart[0].quantity++;

console.log(cart); // [{ pizzaId: 1, quantity: 3 }, { pizzaId: 2, quantity: 1 }]
```

### **3. `.map()` Method:**

- **Purpose**: The `.map()` method creates a new array populated with the results of calling a provided function on every element in the calling array.
  
- **Return Value**:
  - **New Array**: `.map()` returns a new array. If the function returns objects, they can either be references to the original objects or entirely new objects depending on how the function is written.
  - **Copies or References**: If you return the original object (e.g., `return item;`), the new array will contain references. If you create a new object in the callback (e.g., `return { ...item, newProperty: value };`), the new array will contain new objects.

**Example with References:**

```javascript
let cart = [{ pizzaId: 1, quantity: 2 }, { pizzaId: 2, quantity: 1 }];
let mappedCart = cart.map(item => item);

// mappedCart contains references to the original objects
mappedCart[0].quantity++;

console.log(cart); // [{ pizzaId: 1, quantity: 3 }, { pizzaId: 2, quantity: 1 }]
```

**Example with New Objects:**

```javascript
let cart = [{ pizzaId: 1, quantity: 2 }, { pizzaId: 2, quantity: 1 }];
let mappedCart = cart.map(item => ({ ...item, quantity: item.quantity * 2 }));

// mappedCart contains new objects
console.log(cart);       // [{ pizzaId: 1, quantity: 2 }, { pizzaId: 2, quantity: 1 }]
console.log(mappedCart); // [{ pizzaId: 1, quantity: 4 }, { pizzaId: 2, quantity: 2 }]
```

### **Summary:**
- **`.find()`**: Returns a reference to the found object, not a copy.
- **`.filter()`**: Returns a new array of references to the original objects.
- **`.map()`**: Returns a new array, which can either contain references to the original objects or new objects depending on how the mapping function is written.

So when you use `find()`, `filter()`, or `map()`, the behavior depends on whether you return references or create new objects inside your callback function.


//while passing the, selector function to useSelector only pass it's name if theris no, argument to be passed.
// const cart = useSelector(getCart);

  //As We cannot call useDispatch() inside the pure functions as it is a hook
  //hence this is, a sneeky trick but don't use it, regularly for optimization concerns.
  
  store.dispatch(clearCart());
  
  
//STUDY THE CODE AND STRATEGY

        <div>
          //see, here along wiht order data, we also want to send items added to cart and user location data. so this is a trick to do that.
          <input type="hidden" name="cart" value={JSON.stringify(cart)} />
          <input
            type="hidden"
            name="postion"
            value={
              position.longitude
                ? `${position.latitude}, ${position.longitude}`
                : ""
            }
          />
          <Button type="primary" disabled={isSubmmiting || isLoading}>
            {isSubmmiting
              ? "Placing order"
              : `Order now ${formatCurrency(totalPrice)}`}
          </Button>
        </div>


//All the form and hidden field data goes here

export async function action({ request }) {
  const formData = await request.formData();
  const data = Object.fromEntries(formData);
  const order = {
    ...data,
    cart: JSON.parse(data.cart),
    priority: data.priority === "true",
  };
  // console.log(order);
  const errors = {};
  if (!isValidPhone(order.phone)) {
    errors.phone = "Please provide correct phone no.";
  }
  if (Object.keys(errors).length > 0) return errors;

  const newOrder = await createOrder(order);

  //As We cannot call useDispatch() inside the pure functions as it is a hook
  //hence this is, a sneeky trick but don't use it, regularly for optimization concerns.
  store.dispatch(clearCart());
  return redirect(`/order/${newOrder.id}`);
}	


// Learn and do Learn ways of handling froms, with the help of react-router-dom

import React from "react";
import Button from "../../UI/Button";
import { useFetcher } from "react-router-dom";
import { updateOrder } from "../../Services/apiRestaurant";

function UpdateOrder({ order }) {
  const fetcher = useFetcher();
  return (
    <fetcher.Form method="PATCH" className="text-right">
      <Button type={"primary"}>Make Priority</Button>
    </fetcher.Form>
  );
}

export default UpdateOrder;

export async function action({ request, params }) {
  const data = { priority: true };
  await updateOrder(params.orderId, data);
  return null;
}

// const fetcher = useFetcher(); fetcher brings you the data from them page, without navigating to it, it brings it from action and loader functon. it is done using fethcer.load("/menu").

//in the above code it is also used for, submitting the Form, as we havent maintined any priority state gloabally or any other state variable, its an object properity sent to backend while, placing the order. on createnewOrder/new page.

//now the question is, how do we update the priority in backend. that's when <fetcher.Form></fetcher.Form> you can directly use <Form> from react-router but theirs a problem with, this plain <Form> tag, it actiually causes the navigation, although in an controlled manner, but it still does cause navigation to the next page. to avoid this use <fetcher.Form></fetcher.Form> learn more about these. on Chatgpt.

//IMP Learn how to handle forms, using react-router and formik.

   
